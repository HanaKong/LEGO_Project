<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.javaweb13S.dao.MemberDAO">

	<select id="getMemberIdCheck" resultType="com.spring.javaweb13S.vo.MemberVO">
		select * from member where uid = #{uid};
	</select>
	
	<select id="getMemberVOfrom" resultType="com.spring.javaweb13S.vo.MemberVO">
		select * from member where email = #{email};
	</select>
	
	<select id="totRecCnt" resultType="int">
    	select count(*) from member <if test='searchItem != ""'>
        where ${searchSw} like CONCAT('%',#{searchItem},'%')</if>;
  	</select>
  	
  	<select id="getWatchList" resultType="com.spring.javaweb13S.vo.WatchListVO">
  		select *, price*(1-discountRate/100) as productDiscountPrice from watchList where uid = #{uid};
  	</select>
  	
  	<select id="getOrderInfo" resultType="com.spring.javaweb13S.vo.OrderVO">
  		SELECT *, (SELECT COUNT(*) FROM productorder AS po WHERE po.merchant_uid = p.merchant_uid AND po.price <![CDATA[<=]]> p.price) AS rank FROM productorder as p where uid = #{uid} order by idx desc;
  	</select>
	
  	<select id="getOrderCntInfo" resultType="com.spring.javaweb13S.vo.OrderVO">
  		select merchant_uid, count(merchant_uid) as merchant_uidCnt ,(select sum(price) from productorder as po where po.merchant_uid = p.merchant_uid) as totalPrice from productorder as p where uid = #{uid} group by merchant_uid order by idx desc;
  	</select>
	
	
	
	
	<insert id="setMemberJoin">
		insert into member (idx, uid, pwd, email, nickName, level, point, userDel, startDate, lastDate) values (default, #{vo.uid}, #{vo.pwd}, #{vo.email}, #{vo.nickName}, default, default, default, default, default)
		<!-- insert into member values (default, #{vo.uid}, #{vo.pwd}, #{vo.email}, "", #{vo.nickName}, "", "", default, default, default, default, default); -->
	</insert>
	
	<update id="setMemberTempPwdUpdate">
		update member set pwd = #{tempPwd} where uid = #{uid}; 
	</update>
	
	<update id="setMemberUpdate">
		update member set email = #{memberVO.email}, name = #{memberVO.name}, nickName = #{memberVO.nickName},
		tel = #{memberVO.tel}, address = #{memberVO.address} where uid = #{memberVO.uid}; 
	</update>
	
	<update id="setPwdUpdate">
		update member set pwd = #{pwd} where uid = #{uid}; 
	</update>
	
	<update id="setMemberDelete">
		update member set userDel = 'OK' where uid = #{uid};
	</update>
	
	<update id="setMemberDateUpdate">
		update member set lastDate = default where uid = #{uid};
	</update>
	
	<update id="setMemberLevelUp">
		update member set level = '1' where uid = #{uid};
	</update>
	
</mapper>